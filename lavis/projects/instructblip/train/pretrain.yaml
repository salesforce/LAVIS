 # Copyright (c) 2022, salesforce.com, inc.
 # All rights reserved.
 # SPDX-License-Identifier: BSD-3-Clause
 # For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause

model:
  arch: blip_vqa
  model_type: vqav2
  image_size: 480
  # load_pretrained: False


datasets:
  coco_caption:
    vis_processor:
        train:
          name: "blip2_image_train"
          image_size: 224
        eval:
          name: "blip_image_eval"
          image_size: 364
    text_processor:
        train:
          name: "blip_caption"
        eval:
          name: "blip_caption"
#     build_info:
#         images:
#             storage: '/export/share/datasets/vision/coco/images/'
  vg_caption: # name of the dataset builder
    vis_processor:
        train:
          name: "blip_image_train"
          image_size: 224
    text_processor:
        train:
          name: "blip_caption"
#     build_info:
#         images:
#             storage: '//export/share/datasets/vision/visual-genome/image/'
  laion2B_multi:
    vis_processor:
        train:
          name: "blip_image_train"
          image_size: 224
    text_processor:
        train:
          name: "blip_caption"
    build_info:
        storage: "/export/laion2b-multi/laion2B-multi/data/part-00000/{00000..00001}.tar"

  ok_vqa: # name of the dataset builder
    vis_processor:
        eval:
          name: "blip_image_eval"
          image_size: 480
    text_processor:
        eval:
          name: "blip_question"

  coco_vqa: # name of the dataset builder
    type: eval
    vis_processor:
        eval:
          name: "blip_image_eval"
          image_size: 480
    text_processor:
        eval:
          name: "blip_question"

run:
  runner: runner_multieval
  task: instruct_tuning

  task_config:
    train:
      dataset_name2ratio: {
        "coco_caption": 1,
        # "vg_caption": 1,
        "laion2B_multi": 1,
      }

    eval:
      # # COCO captioning
      # - captioning:
      #     # tasks will be sampled accordingly to normalized ratios
      #     dataset: coco_caption
      #     split: test

      # - captioning:
      #     # tasks will be sampled accordingly to normalized ratios
      #     dataset: coco_caption
      #     split: val

      # OKVQA
      - vqa:
          dataset: ok_vqa
          split: test
          args:
            max_len: 10
            min_len: 1
            num_beams: 3
            num_ans_candidates: 128
            inference_method: "rank"

      # OKVQA
      # - vqa:
      #     dataset: ok_vqa
      #     split: test
      #     args:
      #       max_len: 10
      #       min_len: 1
      #       num_beams: 3
      #       num_ans_candidates: 128
      #       inference_method: "rank"

      # # VQAv2
      # - vqa:
      #     dataset: coco_vqa
      #     split: val
      #     args:
      #       max_len: 10
      #       min_len: 1
      #       num_beams: 3
      #       num_ans_candidates: 128
      #       inference_method: "rank"

  # optimizer
  lr_sched: "linear_warmup_cosine_lr"
  init_lr: 1e-4
  min_lr: 1e-5
  warmup_lr: 1e-6

  weight_decay: 0.05

  max_iters: 1e6
  iters_per_inner_epoch: 5e4

  batch_size_train: 8
  batch_size_eval: 16
  num_workers: 4
  warmup_steps: 5000

  seed: 42
  output_dir: "output/InstructBLIP/debug"

  amp: True
  resume_ckpt_path: null

  evaluate: True
  # train_splits: ["train"]

  device: "cuda"
  world_size: 1
  dist_url: "env://"
  distributed: True
